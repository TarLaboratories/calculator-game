project.ext.lwjglVersion = "3.3.6"
project.ext.lwjglNatives = "natives-linux"

apply plugin: 'java'
apply plugin: 'application'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.python:jython-slim:2.7.4'
    implementation 'org.json:json:20231013'
    implementation 'org.apache.logging.log4j:log4j-api:2.24.3'
    implementation 'org.joml:joml:1.9.6'
    implementation 'org.l33tlabs.twl:pngdecoder:1.0'
    compileOnly 'org.jetbrains:annotations:26.0.2'
    runtimeOnly 'org.apache.logging.log4j:log4j-core:2.24.3'

    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-bgfx"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-nanovg"
    implementation "org.lwjgl:lwjgl-nuklear"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-par"
    implementation "org.lwjgl:lwjgl-stb"
    implementation "org.lwjgl:lwjgl-vulkan"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-bgfx::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-nanovg::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-nuklear::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-par::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    mainClass = 'Main'
}

jar {
    destinationDirectory.set(layout.buildDirectory.dir("jars"))
    manifest {
        attributes(
                'Main-Class': 'Main',
                'Multi-Release': true
        )
    }
    duplicatesStrategy = 'EXCLUDE'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
    }
}

CopySpec configSpec = copySpec {
    from 'src/main/config'
    include '*'
}

tasks.register('copyConfigs', Copy) {
    into layout.buildDirectory.dir('classes/java/main')
    with configSpec
}

tasks.compileJava.dependsOn.add 'copyConfigs'